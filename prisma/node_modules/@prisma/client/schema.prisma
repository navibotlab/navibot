generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id                       String                    @id @default(cuid())
  name                     String
  subdomain                String?                   @unique
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  agents                   Agent[]
  contact_fields           ContactField[]
  conversations            Conversation[]
  disparaJaConnections     DisparaJaConnection[]
  dispara_ja_logs          DisparaJaLog[]
  files                    File[]
  integrations             Integration[]
  leads                    Lead[]
  system_configs           SystemConfig[]
  users                    users[]
  vector_stores            VectorStore[]
  whatsappCloudConnections WhatsAppCloudConnection[]

  @@map("workspaces")
}

model users {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String?
  password           String
  role               String              @default("user")
  workspaceId        String
  emailVerified      DateTime?
  verifyToken        String?
  resetToken         String?
  resetTokenExpiry   DateTime?
  lastLogin          DateTime?
  status             String              @default("pending")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  accessTokens       AccessToken[]
  integrations       Integration[]
  workspace          Workspace           @relation(fields: [workspaceId], references: [id])
  verificationTokens VerificationToken[]

  @@map("users")
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  features    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SystemConfig {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspaces  Workspace @relation(fields: [workspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([workspaceId])
  @@map("system_configs")
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Integration {
  id          String    @id @default(cuid())
  userId      String
  provider    String
  credentials Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  user        users     @relation(fields: [userId], references: [id])
  workspaces  Workspace @relation(fields: [workspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, provider])
  @@map("integrations")
}

model Agent {
  id                       String                    @id @default(cuid())
  name                     String
  description              String?
  systemPrompt             String?                   @map("system_prompt")
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @default(now()) @updatedAt
  agentFunction            String?                   @map("agent_function")
  agentSkills              String?                   @map("agent_skills")
  assistantId              String?                   @map("assistant_id")
  companyDescription       String?                   @map("company_description")
  companyName              String?                   @map("company_name")
  companySector            String?                   @map("company_sector")
  companyWebsite           String?                   @map("company_website")
  frequencyPenalty         Float?                    @map("frequency_penalty")
  imageUrl                 String?                   @map("image_url")
  initialMessage           String?                   @map("initial_message")
  internalName             String?                   @map("internal_name")
  language                 String?
  maxMessages              Int?                      @map("max_messages")
  maxTokens                Int?                      @map("max_tokens")
  model                    String?
  personalityObjective     String?                   @map("personality_objective")
  presencePenalty          Float?                    @map("presence_penalty")
  productInfo              String?                   @map("product_info")
  responseFormat           String?                   @map("response_format")
  restrictions             String?
  temperature              Float?
  timezone                 String?
  vectorStoreId            String?
  voiceTone                String?                   @map("voice_tone")
  openaiApiKey             String?                   @map("openai_api_key")
  userId                   String
  workspaceId              String
  workspace                Workspace                 @relation(fields: [workspaceId], references: [id])
  disparaJaConnections     DisparaJaConnection[]
  whatsappCloudConnections WhatsAppCloudConnection[]

  @@map("agents")
}

model File {
  id          String    @id @default(cuid())
  fileId      String    @unique
  filename    String
  purpose     String
  size        Int
  type        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@map("files")
}

model VectorStore {
  id          String    @id @default(cuid())
  name        String
  description String?
  openaiId    String    @unique
  files       Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspaces  Workspace @relation(fields: [workspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([workspaceId])
  @@map("vector_stores")
}

model ContactField {
  id            String    @id @default(cuid())
  name          String
  type          String
  required      Boolean   @default(false)
  options       String[]  @default([])
  placeholder   String?
  default_value String?
  description   String?
  order         Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  workspaceId   String
  workspaces    Workspace @relation(fields: [workspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([workspaceId])
  @@map("contact_fields")
}

model DisparaJaConnection {
  id          String         @id @default(uuid())
  agentId     String
  provider    String         @default("DISPARA_JA")
  secret      String
  sid         String
  token       String?
  phoneNumber String
  unique      String
  webhookUrl  String
  status      String         @default("inactive")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  workspaceId String
  agent       Agent          @relation(fields: [agentId], references: [id], onDelete: Cascade)
  workspace   Workspace      @relation(fields: [workspaceId], references: [id])
  logs        DisparaJaLog[]

  @@map("dispara_ja_connections")
}

model DisparaJaLog {
  id           String               @id @default(uuid())
  connectionId String?
  type         String
  message      String
  timestamp    DateTime             @default(now())
  workspaceId  String
  connection   DisparaJaConnection? @relation(fields: [connectionId], references: [id])
  workspaces   Workspace            @relation(fields: [workspaceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([workspaceId])
  @@map("dispara_ja_logs")
}

model Lead {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  phone         String
  photo         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  workspaceId   String
  conversations Conversation[]
  workspace     Workspace      @relation(fields: [workspaceId], references: [id])

  @@unique([phone, workspaceId])
  @@index([workspaceId])
  @@map("leads")
}

model Conversation {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId      String    @map("lead_id") @db.Uuid
  threadId    String?   @map("thread_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  workspaceId String
  lead        Lead      @relation(fields: [leadId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  messages    Message[]

  @@map("conversations")
}

model Message {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversationId String       @map("conversation_id") @db.Uuid
  content        String
  sender         String       @default("agent")
  read           Boolean      @default(false)
  createdAt      DateTime     @default(now()) @map("created_at")
  mediaUrl       String?      @map("media_url")
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at")
  /// @AllowedValues: ["text", "image", "audio"]
  type           String       @default("text")
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@map("messages")
}

model WhatsAppCloudConnection {
  id            String    @id @default(cuid())
  agentId       String
  phoneNumberId String
  accessToken   String
  status        String    @default("inactive")
  webhookUrl    String?
  workspaceId   String
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  verifyToken   String    @default("navibot") @map("verify_token")
  agent         Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade)
  workspace     Workspace @relation(fields: [workspaceId], references: [id])

  @@map("whatsapp_cloud_connections")
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
  @@map("verification_tokens")
}

model AccessToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("access_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid()) @db.VarChar(25)
  email   String
  token   String   @unique
  expires DateTime

  @@index([email], map: "idx_passwordresettoken_email")
}

enum MessageType {
  text
  image
  audio
}
