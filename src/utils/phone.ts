/**
 * Formata um n√∫mero de telefone do Brasil para o formato padr√£o
 * Adiciona o 9 quando necess√°rio e mant√©m apenas d√≠gitos
 * @param phone n√∫mero de telefone
 * @returns n√∫mero formatado ou null se inv√°lido
 */
export function formatBrazilianPhoneNumber(phone: string): string | null {
  try {
    // Remove todos os caracteres n√£o num√©ricos
    const digits = phone.replace(/\D/g, '');

    // Verifica se √© um n√∫mero brasileiro (come√ßa com 55)
    if (!digits.startsWith('55')) {
      console.log('‚ùå N√∫mero n√£o √© brasileiro:', phone);
      return null;
    }

    // Extrai as partes do n√∫mero
    const countryCode = digits.slice(0, 2); // 55
    const ddd = digits.slice(2, 4); // DDD
    let number = digits.slice(4); // Resto do n√∫mero

    // Valida DDD
    if (!/^[1-9][0-9]$/.test(ddd)) {
      console.log('‚ùå DDD inv√°lido:', ddd);
      return null;
    }

    // Verifica o tamanho do n√∫mero (sem pa√≠s e DDD)
    if (number.length === 9) {
      // N√∫mero m√≥vel j√° com 9
      if (number[0] !== '9') {
        console.log('‚ùå N√∫mero m√≥vel com 9 d√≠gitos deve come√ßar com 9');
        return null;
      }
      console.log('üì± N√∫mero m√≥vel j√° com 9');
      return `${countryCode}${ddd}${number}`;
    } else if (number.length === 8) {
      // Se tem 8 d√≠gitos, √© um n√∫mero m√≥vel sem o 9
      console.log('üì± N√∫mero m√≥vel detectado, adicionando d√≠gito 9');
      return `${countryCode}${ddd}9${number}`;
    }

    console.log('‚ùå Formato de n√∫mero inv√°lido:', {
      countryCode,
      ddd,
      number,
      length: number.length
    });
    return null;
  } catch (error) {
    console.error('‚ùå Erro ao formatar n√∫mero:', error);
    return null;
  }
}

/**
 * Normaliza um n√∫mero de telefone para busca
 * Remove todos os caracteres n√£o num√©ricos
 * @param phone n√∫mero de telefone
 * @returns n√∫mero apenas com d√≠gitos ou null se vazio
 */
export function normalizePhoneNumber(phone: string): string | null {
  try {
    const normalized = phone.replace(/\D/g, '');
    return normalized || null;
  } catch {
    return null;
  }
} 