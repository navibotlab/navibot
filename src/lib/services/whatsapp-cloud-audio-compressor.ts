import { structuredLog, LogContext } from './whatsapp-cloud-logger';
import { randomUUID } from 'crypto';

// Verificar se estamos em ambiente de servidor (Node.js)
const isServer = typeof window === 'undefined';

// Vari√°vel para controlar se FFMPEG est√° dispon√≠vel
let ffmpegAvailable = false;
let ffmpegInstance: any = null;

// Tenta importar o ffmpeg apenas no servidor, de forma bem simplificada
if (isServer) {
  try {
    // Tentativa simplificada de importa√ß√£o do ffmpeg
    ffmpegInstance = require('fluent-ffmpeg');
    if (typeof ffmpegInstance === 'function') {
      ffmpegAvailable = true;
      console.log('‚úÖ Fluent-FFMPEG carregado com sucesso');
    } else {
      console.warn('‚ö†Ô∏è Fluent-FFMPEG importado, mas n√£o √© uma fun√ß√£o v√°lida');
      ffmpegAvailable = false;
      ffmpegInstance = null;
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è N√£o foi poss√≠vel carregar fluent-ffmpeg, √°udios n√£o ser√£o comprimidos');
    ffmpegAvailable = false;
    ffmpegInstance = null;
  }
}

/**
 * Interface para as op√ß√µes de compress√£o de √°udio
 */
interface AudioCompressionOptions {
  bitrate?: string;  // ex: '64k'
  channels?: number; // 1 = mono, 2 = stereo
  sampleRate?: number; // ex: 22050, 44100
  format?: string; // ex: 'ogg', 'mp3'
}

/**
 * Mapeia tipos MIME para extens√µes de arquivo
 */
const mimeToExtension = (mimeType: string): string => {
  const mime = mimeType.toLowerCase();
  if (mime.includes('ogg')) return 'ogg';
  if (mime.includes('mp3') || mime.includes('mpeg')) return 'mp3';
  if (mime.includes('wav')) return 'wav';
  if (mime.includes('mp4') || mime.includes('m4a')) return 'mp4';
  if (mime.includes('aac')) return 'aac';
  if (mime.includes('webm')) return 'webm';
  if (mime.includes('flac')) return 'flac';
  return 'ogg'; // Padr√£o para casos n√£o mapeados
};

/**
 * Implementa√ß√£o simplificada de compress√£o de √°udio
 * Quando o FFMPEG n√£o est√° dispon√≠vel, apenas retorna o buffer original
 * 
 * @param buffer Buffer do √°udio a ser comprimido
 * @param mimeType Tipo MIME do √°udio
 * @param options Op√ß√µes de compress√£o (n√£o utilizadas se FFMPEG n√£o estiver dispon√≠vel)
 * @param logContext Contexto para logs estruturados
 * @returns Buffer do √°udio comprimido ou o original
 */
export const compressAudio = async (
  buffer: ArrayBuffer, 
  mimeType: string,
  options: AudioCompressionOptions = {},
  logContext?: LogContext
): Promise<Buffer> => {
  const logMessage = (level: string, message: string, data?: any) => {
    if (logContext) {
      structuredLog(logContext, level as any, message, data);
    } else {
      console.log(`[${level.toUpperCase()}] ${message}`, data || '');
    }
  };

  logMessage('info', 'üîÑ Iniciando processamento de √°udio...', { 
    size: buffer.byteLength, 
    mimeType,
    options
  });

  // Se FFMPEG n√£o est√° dispon√≠vel, retornar o buffer original
  if (!isServer || !ffmpegAvailable || !ffmpegInstance) {
    logMessage('warn', '‚ö†Ô∏è FFMPEG n√£o dispon√≠vel, usando √°udio original sem compress√£o');
    return Buffer.from(buffer);
  }

  // Se chegou aqui, o FFMPEG est√° dispon√≠vel, mas vamos fazer uma abordagem simplificada
  // para evitar problemas com o Next.js
  
  // Por ora, vamos apenas retornar o buffer original como solu√ß√£o segura
  // at√© que possamos resolver os problemas com o FFMPEG de forma mais adequada
  logMessage('info', 'üîÑ FFMPEG dispon√≠vel, mas usando passthrough por seguran√ßa');
  
  // Criar estat√≠sticas de "compress√£o" (mesmo que n√£o esteja comprimindo)
  logMessage('info', 'üìä Estat√≠sticas de √°udio:', {
    originalSize: buffer.byteLength,
    processedSize: buffer.byteLength,
    reductionPercent: 0
  });

  return Buffer.from(buffer);
};

/**
 * Verifica se um tipo MIME de √°udio √© suportado
 * 
 * @param mimeType Tipo MIME a ser verificado
 * @param allowedTypes Lista de tipos MIME permitidos
 * @returns Verdadeiro se o tipo √© suportado
 */
export const isAudioMimeTypeSupported = (
  mimeType: string | null | undefined, 
  allowedTypes: string[]
): boolean => {
  if (!mimeType) return false;

  const normalizedMimeType = mimeType.toLowerCase().trim();
  
  return allowedTypes.some(type => normalizedMimeType.includes(type.toLowerCase()));
}; 