'use client'

import { useRouter } from 'next/navigation'
import { useState, useEffect } from 'react'

const menuItems = [
  {
    title: 'Agentes de IA',
    description: 'Gerenciar agentes inteligentes',
    id: 'agents',
    icon: 'ü§ñ'
  },
  {
    title: 'Ver conversas',
    description: 'Hist√≥rico de conversas',
    id: 'conversations',
    icon: 'üí¨'
  },
  {
    title: 'Ver leads',
    description: 'Gerenciar leads do sistema',
    id: 'leads',
    icon: 'üë•'
  },
  {
    title: 'Ver m√©tricas',
    description: 'An√°lise de desempenho',
    id: 'metrics',
    icon: 'üìä'
  },
  {
    title: 'Integra√ß√µes',
    description: 'Configurar APIs e servi√ßos',
    id: 'integrations',
    icon: 'üîå'
  }
]

// Componente de cria√ß√£o de agente
const CreateAgentForm = ({ 
  onCancel, 
  onSuccess,
  editingAgent = null 
}: { 
  onCancel: () => void, 
  onSuccess: () => void,
  editingAgent?: any
}) => {
  const [activeTab, setActiveTab] = useState('identity')
  const [activeSection, setActiveSection] = useState('personality')
  const [isCreating, setIsCreating] = useState(false)
  const [error, setError] = useState('')
  
  // Estados para os campos do formul√°rio
  const [agentName, setAgentName] = useState(editingAgent?.name || '')
  const [internalName, setInternalName] = useState(editingAgent?.internalName || '')
  const [initialMessage, setInitialMessage] = useState(editingAgent?.initialMessage || '')
  const [voiceTone, setVoiceTone] = useState(editingAgent?.voiceTone || 'profissional')
  const [selectedModel, setSelectedModel] = useState(editingAgent?.model || 'gpt-4')
  const [language, setLanguage] = useState(editingAgent?.language || 'pt')
  const [timezone, setTimezone] = useState(editingAgent?.timezone || 'America/Sao_Paulo')
  const [instructions, setInstructions] = useState(editingAgent?.instructions || '')
  const [isModelLoading, setIsModelLoading] = useState(false)
  const [modelError, setModelError] = useState('')
  
  // Adicionando estados para os par√¢metros do modelo LLM
  const [temperature, setTemperature] = useState(editingAgent?.temperature || 0.7)
  const [frequencyPenalty, setFrequencyPenalty] = useState(editingAgent?.frequencyPenalty || 0.25)
  const [presencePenalty, setPresencePenalty] = useState(editingAgent?.presencePenalty || 0.25)
  const [maxMessages, setMaxMessages] = useState(editingAgent?.maxMessages || 20)
  const [maxTokens, setMaxTokens] = useState(editingAgent?.maxTokens || 5000)
  const [responseFormat, setResponseFormat] = useState(editingAgent?.responseFormat || 'text')
  const [showLLMParams, setShowLLMParams] = useState(false)

  const [companyName, setCompanyName] = useState(editingAgent?.companyName || '')
  const [companySector, setCompanySector] = useState(editingAgent?.companySector || '')
  const [companyWebsite, setCompanyWebsite] = useState(editingAgent?.companyWebsite || '')
  const [companyDescription, setCompanyDescription] = useState(editingAgent?.companyDescription || '')

  // Estados para os campos de prompt de IA
  const [personalityObjective, setPersonalityObjective] = useState(editingAgent?.personalityObjective || '')
  const [agentSkills, setAgentSkills] = useState(editingAgent?.agentSkills || '')
  const [agentFunction, setAgentFunction] = useState(editingAgent?.agentFunction || '')
  const [productInfo, setProductInfo] = useState(editingAgent?.productInfo || '')
  const [restrictions, setRestrictions] = useState(editingAgent?.restrictions || '')

  // Estados para est√°gios e condi√ß√µes
  interface Stage {
    id: string;
    name: string;
    description: string;
    prompt: string;
    conditions: Condition[];
  }

  interface Condition {
    id: string;
    type: 'keyword' | 'intent' | 'entity' | 'custom';
    value: string;
    action: 'next_stage' | 'collect_info' | 'redirect' | 'custom_response';
    targetStageId?: string;
    response?: string;
  }

  const [stages, setStages] = useState<Stage[]>(editingAgent?.stages || [])
  const [editingStage, setEditingStage] = useState<Stage | null>(null)
  const [showStageForm, setShowStageForm] = useState(false)
  const [editingCondition, setEditingCondition] = useState<Condition | null>(null)
  const [showConditionForm, setShowConditionForm] = useState(false)

  const sections = [
    { id: 'personality', icon: 'üë§', label: 'Personalidade' },
    { id: 'brain', icon: 'üß†', label: 'C√©rebro' },
    { id: 'skills', icon: '‚ö°', label: 'Habilidades' },
    { id: 'visual', icon: 'üé®', label: 'Visual' },
    { id: 'usage', icon: 'üéØ', label: 'Onde Usar' }
  ]

  const tabs = [
    { id: 'identity', label: 'Identidade do Agente' },
    { id: 'company', label: 'Identidade da Empresa' },
    { id: 'behavior', label: 'Comportamento do Agente' },
    { id: 'functions', label: 'Fun√ß√µes' },
  ]

  // Fun√ß√£o para validar o modelo selecionado com a API da OpenAI
  const validateModel = async (model: string) => {
    setIsModelLoading(true)
    setModelError('')
    try {
      const response = await fetch('/api/integrations/openai/validate-model', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ model }),
      })

      const data = await response.json()
      if (!response.ok) {
        throw new Error(data.error || 'Erro ao validar modelo')
      }

      return true
    } catch (error: any) {
      setModelError(error.message)
      return false
    } finally {
      setIsModelLoading(false)
    }
  }

  // Handler para mudan√ßa de modelo
  const handleModelChange = async (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newModel = e.target.value
    setSelectedModel(newModel)
    await validateModel(newModel)
  }

  const renderPersonalityContent = () => {
    switch (activeTab) {
      case 'stages':
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Nome do Agente
              </label>
              <input
                type="text"
                value={agentName}
                onChange={(e) => setAgentName(e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: Assistente de Vendas"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Instru√ß√µes Gerais
              </label>
              <textarea
                value={instructions}
                onChange={(e) => setInstructions(e.target.value)}
                rows={6}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="- Voc√™ √© Ana, a assistente virtual da TechSolutions Brasil.
- Seu objetivo √© fornecer um atendimento eficiente e profissional.
- Represente os valores da empresa: inova√ß√£o, excel√™ncia e foco no cliente.

Ao interagir com os usu√°rios:
- Seja sempre cordial e profissional
- Forne√ßa informa√ß√µes precisas sobre os servi√ßos da empresa
- Colete informa√ß√µes de contato quando o usu√°rio demonstrar interesse
- Encaminhe para um atendente humano quest√µes complexas ou t√©cnicas
- Evite fazer promessas espec√≠ficas sobre prazos ou valores sem consultar a equipe"
              />
            </div>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-medium text-gray-200">Est√°gios/Condi√ß√µes</h3>
                <button 
                  onClick={() => {
                    setEditingStage(null);
                    setShowStageForm(true);
                  }}
                  className="text-sm text-blue-400 hover:text-blue-300"
                >
                  + Adicionar est√°gio
                </button>
              </div>
              
              {stages.map((stage: Stage, index: number) => (
                <div key={stage.id} className="bg-gray-700 p-4 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="text-sm font-medium text-white">Est√°gio {index}: {stage.name}</h4>
                      <p className="text-xs text-gray-400">{stage.description}</p>
                    </div>
                    <div className="flex space-x-2">
                      <button 
                        onClick={() => {
                          setEditingStage(stage);
                          setShowStageForm(true);
                        }}
                        className="text-blue-400 hover:text-blue-300 text-sm"
                      >
                        Editar
                      </button>
                      {index > 0 && (
                        <button 
                          onClick={() => {
                            const newStages = [...stages];
                            newStages.splice(index, 1);
                            setStages(newStages);
                          }}
                          className="text-red-400 hover:text-red-300 text-sm"
                        >
                          Remover
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              ))}
              
              {showStageForm && (
                <div className="bg-gray-800 border border-gray-700 p-4 rounded-lg">
                  <h3 className="text-md font-medium text-white mb-4">
                    {editingStage ? 'Editar Est√°gio' : 'Novo Est√°gio'}
                  </h3>
                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-200 mb-2">
                        Nome do Est√°gio
                      </label>
                      <input
                        type="text"
                        value={editingStage?.name || ''}
                        onChange={(e) => {
                          if (editingStage) {
                            setEditingStage({...editingStage, name: e.target.value});
                          } else {
                            setEditingStage({
                              id: `stage-${Date.now()}`,
                              name: e.target.value,
                              description: '',
                              prompt: '',
                              conditions: []
                            });
                          }
                        }}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Ex: Qualifica√ß√£o de Lead"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-200 mb-2">
                        Descri√ß√£o
                      </label>
                      <input
                        type="text"
                        value={editingStage?.description || ''}
                        onChange={(e) => {
                          if (editingStage) {
                            setEditingStage({...editingStage, description: e.target.value});
                          }
                        }}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Ex: Coletar informa√ß√µes de contato do cliente"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-200 mb-2">
                        Prompt do Est√°gio
                      </label>
                      <textarea
                        value={editingStage?.prompt || ''}
                        onChange={(e) => {
                          if (editingStage) {
                            setEditingStage({...editingStage, prompt: e.target.value});
                          }
                        }}
                        rows={4}
                        className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Ex: Neste est√°gio, voc√™ deve:
- Coletar o nome do cliente de forma natural na conversa
- Obter o e-mail do cliente para contato posterior
- Registrar o n√∫mero de telefone para follow-up
- Perguntar sobre o interesse espec√≠fico nos produtos/servi√ßos
- Registrar todas essas informa√ß√µes para uso futuro"
                      />
                    </div>
                    
                    {editingStage && (
                      <div className="mt-6">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="text-sm font-medium text-gray-200">Condi√ß√µes</h4>
                          <button 
                            onClick={() => {
                              setEditingCondition(null);
                              setShowConditionForm(true);
                            }}
                            className="text-sm text-blue-400 hover:text-blue-300"
                          >
                            + Adicionar condi√ß√£o
                          </button>
                        </div>
                        
                        {editingStage.conditions.length > 0 ? (
                          <div className="space-y-2 mb-4">
                            {editingStage.conditions.map((condition: Condition, idx: number) => (
                              <div key={condition.id} className="bg-gray-700 p-3 rounded-md flex justify-between items-center">
                                <div>
                                  <span className="text-sm text-white">
                                    {condition.type === 'keyword' ? 'Palavra-chave' : 
                                     condition.type === 'intent' ? 'Inten√ß√£o' : 
                                     condition.type === 'entity' ? 'Entidade' : 'Personalizado'}: 
                                    <span className="font-medium ml-1">{condition.value}</span>
                                  </span>
                                  <p className="text-xs text-gray-400">
                                    A√ß√£o: {condition.action === 'next_stage' ? 'Pr√≥ximo est√°gio' : 
                                          condition.action === 'collect_info' ? 'Coletar informa√ß√£o' : 
                                          condition.action === 'redirect' ? 'Redirecionar' : 'Resposta personalizada'}
                                  </p>
                                </div>
                                <div className="flex space-x-2">
                                  <button 
                                    onClick={() => {
                                      setEditingCondition(condition);
                                      setShowConditionForm(true);
                                    }}
                                    className="text-xs text-blue-400 hover:text-blue-300"
                                  >
                                    Editar
                                  </button>
                                  <button 
                                    onClick={() => {
                                      if (editingStage) {
                                        const newConditions = [...editingStage.conditions];
                                        newConditions.splice(idx, 1);
                                        setEditingStage({...editingStage, conditions: newConditions});
                                      }
                                    }}
                                    className="text-xs text-red-400 hover:text-red-300"
                                  >
                                    Remover
                                  </button>
                                </div>
                              </div>
                            ))}
                          </div>
                        ) : (
                          <p className="text-sm text-gray-400 mb-4">Nenhuma condi√ß√£o definida para este est√°gio.</p>
                        )}
                        
                        {showConditionForm && (
                          <div className="bg-gray-900 border border-gray-700 p-3 rounded-md mb-4">
                            <h5 className="text-sm font-medium text-white mb-3">
                              {editingCondition ? 'Editar Condi√ß√£o' : 'Nova Condi√ß√£o'}
                            </h5>
                            <div className="space-y-3">
                              <div>
                                <label className="block text-xs font-medium text-gray-300 mb-1">
                                  Tipo de Condi√ß√£o
                                </label>
                                <select
                                  value={editingCondition?.type || 'keyword'}
                                  onChange={(e) => {
                                    if (editingCondition) {
                                      setEditingCondition({...editingCondition, type: e.target.value as any});
                                    } else {
                                      setEditingCondition({
                                        id: `condition-${Date.now()}`,
                                        type: e.target.value as any,
                                        value: '',
                                        action: 'next_stage',
                                        response: ''
                                      });
                                    }
                                  }}
                                  className="w-full px-3 py-1 bg-gray-700 border border-gray-600 rounded-md text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                >
                                  <option value="keyword">Palavra-chave</option>
                                  <option value="intent">Inten√ß√£o</option>
                                  <option value="entity">Entidade</option>
                                  <option value="custom">Personalizado</option>
                                </select>
                              </div>
                              
                              <div>
                                <label className="block text-xs font-medium text-gray-300 mb-1">
                                  Valor
                                </label>
                                <input
                                  type="text"
                                  value={editingCondition?.value || ''}
                                  onChange={(e) => {
                                    if (editingCondition) {
                                      setEditingCondition({...editingCondition, value: e.target.value});
                                    }
                                  }}
                                  className="w-full px-3 py-1 bg-gray-700 border border-gray-600 rounded-md text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                  placeholder={
                                    editingCondition?.type === 'keyword' ? "Ex: pre√ßo, or√ßamento" : 
                                    editingCondition?.type === 'intent' ? "Ex: solicitar_informacao" : 
                                    editingCondition?.type === 'entity' ? "Ex: email, telefone" : 
                                    "Ex: condi√ß√£o personalizada"
                                  }
                                />
                              </div>
                              
                              <div>
                                <label className="block text-xs font-medium text-gray-300 mb-1">
                                  A√ß√£o
                                </label>
                                <select
                                  value={editingCondition?.action || 'next_stage'}
                                  onChange={(e) => {
                                    if (editingCondition) {
                                      setEditingCondition({...editingCondition, action: e.target.value as any});
                                    }
                                  }}
                                  className="w-full px-3 py-1 bg-gray-700 border border-gray-600 rounded-md text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                >
                                  <option value="next_stage">Ir para pr√≥ximo est√°gio</option>
                                  <option value="collect_info">Coletar informa√ß√£o</option>
                                  <option value="redirect">Redirecionar para humano</option>
                                  <option value="custom_response">Resposta personalizada</option>
                                </select>
                              </div>
                              
                              {editingCondition?.action === 'next_stage' && (
                                <div>
                                  <label className="block text-xs font-medium text-gray-300 mb-1">
                                    Est√°gio de destino
                                  </label>
                                  <select
                                    value={editingCondition?.targetStageId || ''}
                                    onChange={(e) => {
                                      if (editingCondition) {
                                        setEditingCondition({...editingCondition, targetStageId: e.target.value});
                                      }
                                    }}
                                    className="w-full px-3 py-1 bg-gray-700 border border-gray-600 rounded-md text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                  >
                                    <option value="">Selecione um est√°gio</option>
                                    {stages.map((stage: Stage) => (
                                      <option key={stage.id} value={stage.id}>
                                        {stage.name}
                                      </option>
                                    ))}
                                  </select>
                                </div>
                              )}
                              
                              {editingCondition?.action === 'custom_response' && (
                                <div>
                                  <label className="block text-xs font-medium text-gray-300 mb-1">
                                    Resposta personalizada
                                  </label>
                                  <textarea
                                    value={editingCondition?.response || ''}
                                    onChange={(e) => {
                                      if (editingCondition) {
                                        setEditingCondition({...editingCondition, response: e.target.value});
                                      }
                                    }}
                                    rows={3}
                                    className="w-full px-3 py-1 bg-gray-700 border border-gray-600 rounded-md text-white text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    placeholder="Ex: 
- Entendi que voc√™ est√° interessado em nossos pre√ßos.
- Posso fornecer mais informa√ß√µes sobre nossos planos.
- Temos op√ß√µes que se adaptam a diferentes necessidades e or√ßamentos.
- Gostaria de conhecer algum plano espec√≠fico?"
                                  />
                                </div>
                              )}
                              
                              <div className="flex justify-end space-x-2 mt-3">
                                <button
                                  onClick={() => {
                                    setShowConditionForm(false);
                                    setEditingCondition(null);
                                  }}
                                  className="px-2 py-1 text-xs text-gray-300 hover:text-gray-200"
                                >
                                  Cancelar
                                </button>
                                <button
                                  onClick={() => {
                                    if (editingCondition && editingStage) {
                                      let newConditions;
                                      if (editingStage.conditions.some(c => c.id === editingCondition.id)) {
                                        // Editando condi√ß√£o existente
                                        newConditions = editingStage.conditions.map((c: Condition) => 
                                          c.id === editingCondition.id ? editingCondition : c
                                        );
                                      } else {
                                        // Adicionando nova condi√ß√£o
                                        newConditions = [...editingStage.conditions, editingCondition];
                                      }
                                      setEditingStage({...editingStage, conditions: newConditions});
                                      setShowConditionForm(false);
                                      setEditingCondition(null);
                                    }
                                  }}
                                  className="px-2 py-1 bg-blue-500 text-white text-xs rounded-md hover:bg-blue-600"
                                >
                                  {editingCondition && editingStage?.conditions.some(c => c.id === editingCondition.id) 
                                    ? 'Atualizar' 
                                    : 'Adicionar'
                                  }
                                </button>
                              </div>
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                    
                    <div className="flex justify-end space-x-2 mt-4">
                      <button
                        onClick={() => {
                          setShowStageForm(false);
                          setEditingStage(null);
                        }}
                        className="px-3 py-1 text-sm text-gray-300 hover:text-gray-200"
                      >
                        Cancelar
                      </button>
                      <button
                        onClick={() => {
                          if (editingStage) {
                            if (editingStage.id) {
                              // Editando est√°gio existente
                              const newStages = stages.map((s: Stage) => 
                                s.id === editingStage.id ? editingStage : s
                              );
                              setStages(newStages);
                            } else {
                              // Adicionando novo est√°gio
                              setStages([...stages, editingStage]);
                            }
                            setShowStageForm(false);
                            setEditingStage(null);
                          }
                        }}
                        className="px-3 py-1 bg-blue-500 text-white text-sm rounded-md hover:bg-blue-600"
                      >
                        {editingStage?.id ? 'Atualizar' : 'Adicionar'}
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )
      case 'identity':
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Nome do agente
              </label>
              <input
                type="text"
                value={agentName}
                onChange={(e) => setAgentName(e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: Ana (Assistente virtual da TechSolutions)"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Nome interno
              </label>
              <p className="text-sm text-gray-400 mb-2">
                N√£o influencia no comportamento do Agente. Utilize para a sua organiza√ß√£o.
              </p>
              <input
                type="text"
                value={internalName}
                onChange={(e) => setInternalName(e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: Assistente TechSolutions"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Mensagem Inicial
              </label>
              <p className="text-sm text-gray-400 mb-2">
                Essa mensagem ser√° o primeiro contato do seu Agente com os usu√°rios
              </p>
              <textarea
                value={initialMessage}
                onChange={(e) => setInitialMessage(e.target.value)}
                rows={4}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: Ol√°! Eu sou Ana, assistente virtual da TechSolutions Brasil.
- Como posso ajudar voc√™ hoje?
- Estou aqui para fornecer informa√ß√µes sobre nossos servi√ßos.
- Posso tirar d√∫vidas sobre tecnologia ou conectar voc√™ com nossa equipe.
- Conte-me como posso ser √∫til para voc√™!"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Tom de Voz
              </label>
              <p className="text-sm text-gray-400 mb-2">
                Selecione o tom de voz que o seu Agente ir√° utilizar durante as conversas
              </p>
              <select
                value={voiceTone}
                onChange={(e) => setVoiceTone(e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="formal">Formal</option>
                <option value="casual">Casual</option>
                <option value="amigavel">Amig√°vel</option>
                <option value="profissional">Profissional</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Modelo do Agente
              </label>
              <p className="text-sm text-gray-400 mb-2">
                Selecione o modelo do Agente para gera√ß√£o da resposta
              </p>
              <select
                value={selectedModel}
                onChange={handleModelChange}
                disabled={isModelLoading}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="gpt-4">GPT-4</option>
                <option value="gpt-4o">GPT-4o</option>
                <option value="gpt-4o-mini">GPT-4o Mini</option>
                <option value="gpt-4-turbo">GPT-4 Turbo</option>
                <option value="gpt-4-32k">GPT-4 32k</option>
                <option value="gpt-4-0125-preview">GPT-4 Turbo Preview</option>
                <option value="gpt-4-1106-preview">GPT-4 Turbo 1106</option>
                <option value="gpt-4-vision-preview">GPT-4 Vision</option>
              </select>
              {isModelLoading && (
                <p className="text-sm text-blue-400 mt-1">Validando modelo...</p>
              )}
              {modelError && (
                <p className="text-sm text-red-400 mt-1">{modelError}</p>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Idioma
              </label>
              <p className="text-sm text-gray-400 mb-2">
                Selecione o idioma do Agente para gera√ß√£o da resposta
              </p>
              <select
                value={language}
                onChange={(e) => setLanguage(e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="auto">Detec√ß√£o Autom√°tica</option>
                <option value="pt">Portugu√™s</option>
                <option value="en">Ingl√™s</option>
                <option value="es">Espanhol</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Timezone
              </label>
              <p className="text-sm text-gray-400 mb-2">
                Selecione o timezone do Agente para gera√ß√£o da resposta
              </p>
              <select
                value={timezone}
                onChange={(e) => setTimezone(e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="America/Sao_Paulo">S√£o Paulo (GMT -3)</option>
                <option value="America/New_York">New York (GMT -4)</option>
                <option value="Europe/London">London (GMT +1)</option>
                <option value="Asia/Tokyo">Tokyo (GMT +9)</option>
              </select>
            </div>

            <div className="flex justify-end">
              <div className="text-sm text-gray-400">
                80 de 500 caracteres
              </div>
            </div>
          </div>
        )
      case 'behavior':
        return (
          <div className="space-y-6">
            <div>
              {/* Removido o campo de Comportamento do agente */}
              
              {/* Campos de Prompt de IA */}
              <div className="space-y-6">
                <h3 className="text-sm font-medium text-gray-200">Configura√ß√µes de Prompt</h3>
                
                <div>
                  <label className="block text-sm font-medium text-gray-200 mb-2 flex items-center">
                    Personalidade e Objetivo da IA 
                    <span className="ml-1 text-gray-400 text-xs cursor-help" title="Defina a personalidade principal do agente e seu objetivo principal. Exemplo: 'Assistente amig√°vel e prestativo que ajuda clientes a encontrar produtos ideais'.">‚ìò</span>
                  </label>
                  <textarea
                    value={personalityObjective}
                    onChange={(e) => setPersonalityObjective(e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Defina quem √© o agente e qual seu objetivo principal"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-200 mb-2 flex items-center">
                    Habilidades 
                    <span className="ml-1 text-gray-400 text-xs cursor-help" title="Liste as principais habilidades e conhecimentos que o agente deve demonstrar. Exemplo: 'Conhecimento profundo sobre produtos da empresa, capacidade de explicar conceitos t√©cnicos de forma simples'.">‚ìò</span>
                  </label>
                  <textarea
                    value={agentSkills}
                    onChange={(e) => setAgentSkills(e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Liste as habilidades e conhecimentos que o agente deve demonstrar"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-200 mb-2 flex items-center">
                    Fun√ß√µes de IA 
                    <span className="ml-1 text-gray-400 text-xs cursor-help" title="Selecione as fun√ß√µes espec√≠ficas que o agente deve ser capaz de executar, como responder perguntas, coletar informa√ß√µes, agendar compromissos, etc.">‚ìò</span>
                  </label>
                  <select
                    value={agentFunction}
                    onChange={(e) => setAgentFunction(e.target.value)}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecionar</option>
                    <option value="atendimento">Atendimento ao Cliente</option>
                    <option value="vendas">Vendas e Convers√£o</option>
                    <option value="suporte">Suporte T√©cnico</option>
                    <option value="educacao">Educa√ß√£o e Treinamento</option>
                    <option value="coleta">Coleta de Informa√ß√µes</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-200 mb-2 flex items-center">
                    Informa√ß√µes Sobre Produtos e Servi√ßos 
                    <span className="ml-1 text-gray-400 text-xs cursor-help" title="Forne√ßa detalhes sobre os produtos e servi√ßos que o agente deve conhecer. Inclua caracter√≠sticas, benef√≠cios, pre√ßos e diferenciais competitivos.">‚ìò</span>
                  </label>
                  <textarea
                    value={productInfo}
                    onChange={(e) => setProductInfo(e.target.value)}
                    rows={4}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Descreva os produtos e servi√ßos que o agente deve conhecer"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-200 mb-2 flex items-center">
                    Restri√ß√µes 
                    <span className="ml-1 text-gray-400 text-xs cursor-help" title="Especifique o que o agente N√ÉO deve fazer ou dizer. Exemplo: 'N√£o fornecer pre√ßos espec√≠ficos sem consultar a tabela atual, n√£o fazer promessas de entrega sem confirma√ß√£o'.">‚ìò</span>
                  </label>
                  <textarea
                    value={restrictions}
                    onChange={(e) => setRestrictions(e.target.value)}
                    rows={3}
                    className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Liste o que o agente N√ÉO deve fazer ou dizer"
                  />
                </div>
              </div>
              
              {/* Par√¢metros do modelo LLM */}
              <div className="mt-6">
                <button
                  onClick={() => setShowLLMParams(!showLLMParams)}
                  className="flex items-center justify-between w-full px-4 py-2 bg-gray-700 rounded-md text-white"
                >
                  <span className="text-sm font-medium">Par√¢metros do Modelo</span>
                  <span>{showLLMParams ? '‚ñ≤' : '‚ñº'}</span>
                </button>
                
                {showLLMParams && (
                  <div className="mt-4 p-4 bg-gray-800 rounded-md space-y-6">
                    <div>
                      <div className="flex items-center justify-between">
                        <label className="block text-sm font-medium text-gray-200 mb-2 flex items-center">
                          Temperatura 
                          <span className="ml-1 text-gray-400 text-xs cursor-help" title="Controla a aleatoriedade das respostas. Valores mais baixos s√£o mais determin√≠sticos, valores mais altos s√£o mais criativos.">‚ìò</span>
                        </label>
                        <div className="flex items-center">
                          <button 
                            onClick={() => setTemperature(Math.max(0, temperature - 0.1))}
                            className="px-2 py-1 bg-gray-700 text-white rounded-l-md"
                          >
                            ‚àí
                          </button>
                          <input
                            type="number"
                            min="0"
                            max="2"
                            step="0.1"
                            value={temperature}
                            onChange={(e) => setTemperature(parseFloat(e.target.value))}
                            className="w-16 px-2 py-1 bg-gray-700 border-x border-gray-600 text-white text-center"
                          />
                          <button 
                            onClick={() => setTemperature(Math.min(2, temperature + 0.1))}
                            className="px-2 py-1 bg-gray-700 text-white rounded-r-md"
                          >
                            +
                          </button>
                        </div>
                      </div>
                      <input
                        type="range"
                        min="0"
                        max="2"
                        step="0.1"
                        value={temperature}
                        onChange={(e) => setTemperature(parseFloat(e.target.value))}
                        className="w-full mt-2"
                      />
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between">
                        <label className="block text-sm font-medium text-gray-200 mb-2 flex items-center">
                          Penalidade de frequ√™ncia 
                          <span className="ml-1 text-gray-400 text-xs cursor-help" title="Reduz a probabilidade de repeti√ß√£o das mesmas frases. Valores mais altos penalizam mais a repeti√ß√£o.">‚ìò</span>
                        </label>
                        <div className="flex items-center">
                          <button 
                            onClick={() => setFrequencyPenalty(Math.max(0, frequencyPenalty - 0.05))}
                            className="px-2 py-1 bg-gray-700 text-white rounded-l-md"
                          >
                            ‚àí
                          </button>
                          <input
                            type="number"
                            min="0"
                            max="2"
                            step="0.05"
                            value={frequencyPenalty}
                            onChange={(e) => setFrequencyPenalty(parseFloat(e.target.value))}
                            className="w-16 px-2 py-1 bg-gray-700 border-x border-gray-600 text-white text-center"
                          />
                          <button 
                            onClick={() => setFrequencyPenalty(Math.min(2, frequencyPenalty + 0.05))}
                            className="px-2 py-1 bg-gray-700 text-white rounded-r-md"
                          >
                            +
                          </button>
                        </div>
                      </div>
                      <input
                        type="range"
                        min="0"
                        max="2"
                        step="0.05"
                        value={frequencyPenalty}
                        onChange={(e) => setFrequencyPenalty(parseFloat(e.target.value))}
                        className="w-full mt-2"
                      />
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between">
                        <label className="block text-sm font-medium text-gray-200 mb-2 flex items-center">
                          Penalidade de presen√ßa 
                          <span className="ml-1 text-gray-400 text-xs cursor-help" title="Reduz a probabilidade de repeti√ß√£o de t√≥picos. Valores mais altos incentivam o modelo a falar de novos t√≥picos.">‚ìò</span>
                        </label>
                        <div className="flex items-center">
                          <button 
                            onClick={() => setPresencePenalty(Math.max(0, presencePenalty - 0.05))}
                            className="px-2 py-1 bg-gray-700 text-white rounded-l-md"
                          >
                            ‚àí
                          </button>
                          <input
                            type="number"
                            min="0"
                            max="2"
                            step="0.05"
                            value={presencePenalty}
                            onChange={(e) => setPresencePenalty(parseFloat(e.target.value))}
                            className="w-16 px-2 py-1 bg-gray-700 border-x border-gray-600 text-white text-center"
                          />
                          <button 
                            onClick={() => setPresencePenalty(Math.min(2, presencePenalty + 0.05))}
                            className="px-2 py-1 bg-gray-700 text-white rounded-r-md"
                          >
                            +
                          </button>
                        </div>
                      </div>
                      <input
                        type="range"
                        min="0"
                        max="2"
                        step="0.05"
                        value={presencePenalty}
                        onChange={(e) => setPresencePenalty(parseFloat(e.target.value))}
                        className="w-full mt-2"
                      />
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between">
                        <label className="block text-sm font-medium text-gray-200 mb-2 flex items-center">
                          N√∫mero de mensagens de bate-papo antes do resumo autom√°tico 
                          <span className="ml-1 text-gray-400 text-xs cursor-help" title="Define quantas mensagens ser√£o mantidas no hist√≥rico antes de serem resumidas para economizar tokens.">‚ìò</span>
                        </label>
                        <div className="flex items-center">
                          <button 
                            onClick={() => setMaxMessages(Math.max(5, maxMessages - 1))}
                            className="px-2 py-1 bg-gray-700 text-white rounded-l-md"
                          >
                            ‚àí
                          </button>
                          <input
                            type="number"
                            min="5"
                            max="100"
                            step="1"
                            value={maxMessages}
                            onChange={(e) => setMaxMessages(parseInt(e.target.value))}
                            className="w-16 px-2 py-1 bg-gray-700 border-x border-gray-600 text-white text-center"
                          />
                          <button 
                            onClick={() => setMaxMessages(Math.min(100, maxMessages + 1))}
                            className="px-2 py-1 bg-gray-700 text-white rounded-r-md"
                          >
                            +
                          </button>
                        </div>
                      </div>
                      <input
                        type="range"
                        min="5"
                        max="100"
                        step="1"
                        value={maxMessages}
                        onChange={(e) => setMaxMessages(parseInt(e.target.value))}
                        className="w-full mt-2"
                      />
                    </div>
                    
                    <div>
                      <div className="flex items-center justify-between">
                        <label className="block text-sm font-medium text-gray-200 mb-2 flex items-center">
                          M√°ximo de Tokens 
                          <span className="ml-1 text-gray-400 text-xs cursor-help" title="Limite m√°ximo de tokens que o modelo pode gerar em uma resposta.">‚ìò</span>
                        </label>
                        <div className="flex items-center">
                          <button 
                            onClick={() => setMaxTokens(Math.max(100, maxTokens - 100))}
                            className="px-2 py-1 bg-gray-700 text-white rounded-l-md"
                          >
                            ‚àí
                          </button>
                          <input
                            type="number"
                            min="100"
                            max="16000"
                            step="100"
                            value={maxTokens}
                            onChange={(e) => setMaxTokens(parseInt(e.target.value))}
                            className="w-16 px-2 py-1 bg-gray-700 border-x border-gray-600 text-white text-center"
                          />
                          <button 
                            onClick={() => setMaxTokens(Math.min(16000, maxTokens + 100))}
                            className="px-2 py-1 bg-gray-700 text-white rounded-r-md"
                          >
                            +
                          </button>
                        </div>
                      </div>
                      <input
                        type="range"
                        min="100"
                        max="16000"
                        step="100"
                        value={maxTokens}
                        onChange={(e) => setMaxTokens(parseInt(e.target.value))}
                        className="w-full mt-2"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-200 mb-2">
                        Formato de sa√≠da
                      </label>
                      <div className="flex">
                        <button
                          onClick={() => setResponseFormat('text')}
                          className={`px-4 py-2 text-sm ${responseFormat === 'text' ? 'bg-blue-500 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'} rounded-l-md`}
                        >
                          Texto
                        </button>
                        <button
                          onClick={() => setResponseFormat('markdown')}
                          className={`px-4 py-2 text-sm ${responseFormat === 'markdown' ? 'bg-blue-500 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'} border-x border-gray-600`}
                        >
                          Markdown
                        </button>
                        <button
                          onClick={() => setResponseFormat('json')}
                          className={`px-4 py-2 text-sm ${responseFormat === 'json' ? 'bg-blue-500 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'} rounded-r-md`}
                        >
                          JSON
                        </button>
                      </div>
                    </div>
                  </div>
                )}
              </div>
              
              <div className="mt-8 border-t border-gray-700 pt-6">
                <p className="text-sm text-gray-400">
                  Altere e defina as informa√ß√µes para treinar o seu Agente
                </p>
              </div>
            </div>
          </div>
        )
      case 'functions':
        return (
          <div className="space-y-6">
            <div>
              <h3 className="text-sm font-medium text-gray-200 mb-2">Fun√ß√µes do Agente</h3>
              <p className="text-xs text-gray-400 mb-4">Configure as fun√ß√µes que seu agente pode executar</p>
              
              <div className="bg-gray-700 p-4 rounded-lg">
                <p className="text-white text-center">Funcionalidade em desenvolvimento</p>
                <p className="text-gray-400 text-sm text-center mt-2">Esta se√ß√£o estar√° dispon√≠vel em breve.</p>
              </div>
            </div>
          </div>
        )
      case 'company':
        return (
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Para qual empresa o Agente ir√° trabalhar?
              </label>
              <input
                type="text"
                value={companyName}
                onChange={(e) => setCompanyName(e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: TechSolutions Brasil"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Setor da empresa
              </label>
              <select
                value={companySector}
                onChange={(e) => setCompanySector(e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Selecione um setor</option>
                <option value="viagens_intercambio">Viagens e Interc√¢mbio</option>
                <option value="educacao">Educa√ß√£o</option>
                <option value="saude">Sa√∫de</option>
                <option value="tecnologia">Tecnologia</option>
                <option value="financas">Finan√ßas e Bancos</option>
                <option value="varejo">Varejo e Com√©rcio</option>
                <option value="imobiliario">Imobili√°rio</option>
                <option value="alimentacao">Alimenta√ß√£o e Restaurantes</option>
                <option value="servicos">Servi√ßos Profissionais</option>
                <option value="marketing">Marketing e Publicidade</option>
                <option value="construcao">Constru√ß√£o Civil</option>
                <option value="automotivo">Automotivo</option>
                <option value="juridico">Jur√≠dico</option>
                <option value="outros">Outros</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Site da empresa <span className="text-gray-400">(se houver)</span>
              </label>
              <input
                type="url"
                value={companyWebsite}
                onChange={(e) => setCompanyWebsite(e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="Ex: https://www.techsolutions.com.br"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                Fale sobre a sua empresa
              </label>
              <textarea
                value={companyDescription}
                onChange={(e) => setCompanyDescription(e.target.value)}
                rows={6}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="- A TechSolutions Brasil √© uma empresa l√≠der em solu√ß√µes tecnol√≥gicas inovadoras, fundada em 2010.
- Especializada em desenvolvimento de software, consultoria em TI e transforma√ß√£o digital.
- Contamos com mais de 200 colaboradores distribu√≠dos em 5 escrit√≥rios pelo Brasil.
- Atendemos clientes de diversos setores, desde startups at√© grandes corpora√ß√µes.
- Nossa miss√£o √© impulsionar a inova√ß√£o tecnol√≥gica com solu√ß√µes personalizadas.
- Nosso foco √© gerar resultados reais para nossos clientes atrav√©s de tecnologia de ponta."
              />
            </div>
          </div>
        )
      default:
        return null
    }
  }

  const handleCreateAgent = async () => {
    try {
      setIsCreating(true)
      setError('')

      const endpoint = editingAgent ? `/api/agents/${editingAgent.id}` : '/api/agents'
      const method = editingAgent ? 'PUT' : 'POST'

      const response = await fetch(endpoint, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: agentName,
          internalName,
          initialMessage,
          voiceTone,
          model: selectedModel,
          language,
          timezone,
          instructions,
          companyName,
          companySector,
          companyWebsite,
          companyDescription,
          stages,
          // Adicionando os novos par√¢metros
          temperature,
          frequencyPenalty,
          presencePenalty,
          maxMessages,
          maxTokens,
          responseFormat,
          // Adicionando os campos de prompt de IA
          personalityObjective,
          agentSkills,
          agentFunction,
          productInfo,
          restrictions,
        }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Erro ao salvar agente')
      }

      if (!editingAgent) {
        // L√≥gica de redirecionamento espec√≠fica para cada aba
        if (activeTab === 'identity') {
          setActiveTab('company')
        } else if (activeTab === 'company') {
          setActiveTab('behavior')
        } else if (activeTab === 'behavior') {
          setActiveTab('functions')
        }
      } else {
        onSuccess()
      }
    } catch (error: any) {
      setError(error.message)
    } finally {
      setIsCreating(false)
    }
  }

  return (
    <div className="bg-gray-800 rounded-lg">
      <div className="border-b border-gray-700">
        <div className="flex items-center justify-between px-6 py-4">
          <h2 className="text-xl font-bold text-white">
            {editingAgent ? 'Editar Agente' : 'Criar Novo Agente'}
          </h2>
          <button
            onClick={onCancel}
            className="text-gray-400 hover:text-gray-300"
          >
            ‚úï
          </button>
        </div>
        {error && (
          <div className="mx-6 mb-4 p-4 bg-red-500/10 border border-red-500 rounded-md">
            <p className="text-sm text-red-500">{error}</p>
          </div>
        )}
        <div className="flex border-t border-gray-700">
          {sections.map((section) => (
            <button
              key={section.id}
              onClick={() => setActiveSection(section.id)}
              className={`flex items-center px-6 py-3 text-sm font-medium ${
                activeSection === section.id
                  ? 'text-blue-500'
                  : 'text-gray-400 hover:text-gray-300'
              }`}
            >
              <span className="mr-2">{section.icon}</span>
              {section.label}
            </button>
          ))}
        </div>
        {activeSection === 'personality' && (
          <div className="flex border-t border-gray-700">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                onClick={() => {
                  setActiveTab(tab.id);
                }}
                className={`flex items-center px-6 py-3 text-sm font-medium border-b-2 ${
                  activeTab === tab.id
                    ? 'border-blue-500 text-blue-500'
                    : 'border-transparent text-gray-400 hover:text-gray-300'
                }`}
              >
                <span className="mr-2">{tab.label}</span>
              </button>
            ))}
          </div>
        )}
      </div>
      
      <div className="p-6">
        {renderPersonalityContent()}
      </div>

      <div className="flex items-center justify-end gap-4 p-6 border-t border-gray-700">
        <button
          onClick={onCancel}
          className="px-4 py-2 text-sm text-gray-300 hover:text-gray-200"
        >
          Cancelar
        </button>
        <button
          onClick={handleCreateAgent}
          disabled={isCreating || !agentName}
          className={`px-4 py-2 bg-blue-500 text-white text-sm rounded-md ${
            isCreating || !agentName ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-600'
          }`}
        >
          {isCreating 
            ? (editingAgent ? 'Treinando...' : 'Treinando...') 
            : (editingAgent ? 'Treinar Agente' : 'Treinar Agente')
          }
        </button>
      </div>
    </div>
  )
}

// Componente de modal de confirma√ß√£o para exclus√£o
const DeleteConfirmationModal = ({ 
  agentName, 
  onCancel, 
  onConfirm 
}: { 
  agentName: string, 
  onCancel: () => void, 
  onConfirm: () => void 
}) => {
  const [confirmText, setConfirmText] = useState('')
  const [isDeleting, setIsDeleting] = useState(false)

  const handleConfirm = async () => {
    if (confirmText !== 'Delete') return
    
    setIsDeleting(true)
    await onConfirm()
    setIsDeleting(false)
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-gray-800 rounded-lg p-6 w-full max-w-md">
        <h2 className="text-xl font-bold text-white mb-4">Confirmar exclus√£o</h2>
        <p className="text-gray-300 mb-4">
          Voc√™ est√° prestes a excluir o agente <span className="font-bold text-white">{agentName}</span>. 
          Esta a√ß√£o √© irrevers√≠vel e todos os dados associados a este agente ser√£o perdidos.
        </p>
        <p className="text-gray-300 mb-6">
          Para confirmar, digite <span className="font-bold text-white">Delete</span> no campo abaixo:
        </p>
        <input
          type="text"
          value={confirmText}
          onChange={(e) => setConfirmText(e.target.value)}
          className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500 mb-6"
          placeholder="Digite 'Delete' para confirmar"
        />
        <div className="flex justify-end gap-4">
          <button
            onClick={onCancel}
            className="px-4 py-2 text-sm text-gray-300 hover:text-gray-200"
          >
            Cancelar
          </button>
          <button
            onClick={handleConfirm}
            disabled={confirmText !== 'Delete' || isDeleting}
            className={`px-4 py-2 bg-red-500 text-white text-sm rounded-md ${
              confirmText !== 'Delete' || isDeleting ? 'opacity-50 cursor-not-allowed' : 'hover:bg-red-600'
            }`}
          >
            {isDeleting ? 'Excluindo...' : 'Excluir Agente'}
          </button>
        </div>
      </div>
    </div>
  )
}

// Atualizar o componente AgentsPage
const AgentsPage = () => {
  const [isCreating, setIsCreating] = useState(false)
  const [isEditing, setIsEditing] = useState(false)
  const [editingAgent, setEditingAgent] = useState<any>(null)
  const [agents, setAgents] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState('')
  const [deletingAgent, setDeletingAgent] = useState<any>(null)

  const fetchAgents = async () => {
    try {
      setIsLoading(true)
      const response = await fetch('/api/agents')
      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Erro ao carregar agentes')
      }

      setAgents(data)
    } catch (error: any) {
      setError(error.message)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchAgents()
  }, [])

  const handleAgentCreated = async () => {
    setIsCreating(false)
    await fetchAgents()
  }

  const handleEditAgent = (agent: any) => {
    setEditingAgent(agent)
    setIsEditing(true)
  }

  const handleAgentUpdated = async () => {
    setIsEditing(false)
    setEditingAgent(null)
    await fetchAgents()
  }

  const handleDeleteClick = (agent: any) => {
    setDeletingAgent(agent)
  }

  const handleCancelDelete = () => {
    setDeletingAgent(null)
  }

  const handleConfirmDelete = async () => {
    try {
      const response = await fetch(`/api/agents/${deletingAgent.id}`, {
        method: 'DELETE',
      })

      if (!response.ok) {
        const data = await response.json()
        throw new Error(data.error || 'Erro ao excluir agente')
      }

      setDeletingAgent(null)
      await fetchAgents()
    } catch (error: any) {
      setError(error.message)
      setDeletingAgent(null)
    }
  }

  if (isCreating) {
    return <CreateAgentForm onCancel={() => setIsCreating(false)} onSuccess={handleAgentCreated} />
  }

  if (isEditing && editingAgent) {
    return (
      <CreateAgentForm 
        onCancel={() => {
          setIsEditing(false)
          setEditingAgent(null)
        }} 
        onSuccess={handleAgentUpdated}
        editingAgent={editingAgent}
      />
    )
  }

  return (
    <div>
      <h2 className="text-2xl font-bold text-white mb-6">Agentes de IA</h2>
      <div className="bg-gray-800 rounded-lg p-6">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h3 className="text-lg font-medium text-white">Seus Agentes</h3>
            <p className="text-gray-400">Gerencie seus agentes de IA</p>
          </div>
          <button
            onClick={() => setIsCreating(true)}
            className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
          >
            Novo Agente
          </button>
        </div>
        {error && (
          <div className="mb-4 p-4 bg-red-500/10 border border-red-500 rounded-md">
            <p className="text-sm text-red-500">{error}</p>
          </div>
        )}
        <div className="space-y-4">
          {isLoading ? (
            <div className="bg-gray-700 p-4 rounded-lg">
              <p className="text-white">Carregando agentes...</p>
            </div>
          ) : agents.length > 0 ? (
            agents.map((agent: any) => (
              <div key={agent.id} className="bg-gray-700 p-4 rounded-lg">
                <div className="flex justify-between items-center">
                  <div>
                    <h4 className="text-lg font-medium text-white">{agent.name}</h4>
                    <p className="text-sm text-gray-400">{agent.internalName}</p>
                  </div>
                  <div className="flex space-x-2">
                    <button 
                      onClick={() => handleEditAgent(agent)}
                      className="px-3 py-1 text-sm text-blue-400 hover:text-blue-300"
                    >
                      Editar
                    </button>
                    <button 
                      onClick={() => handleDeleteClick(agent)}
                      className="px-3 py-1 text-sm text-red-400 hover:text-red-300"
                    >
                      Excluir
                    </button>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <div className="bg-gray-700 p-4 rounded-lg">
              <p className="text-white">Nenhum agente criado ainda</p>
            </div>
          )}
        </div>
      </div>

      {deletingAgent && (
        <DeleteConfirmationModal
          agentName={deletingAgent.name}
          onCancel={handleCancelDelete}
          onConfirm={handleConfirmDelete}
        />
      )}
    </div>
  )
}

const ConversationsPage = () => (
  <div>
    <h2 className="text-2xl font-bold text-white mb-6">Hist√≥rico de Conversas</h2>
    <div className="bg-gray-800 rounded-lg p-6">
      <div className="space-y-4">
        <div className="bg-gray-700 p-4 rounded-lg">
          <p className="text-white">Nenhuma conversa registrada</p>
        </div>
      </div>
    </div>
  </div>
)

const LeadsPage = () => (
  <div>
    <h2 className="text-2xl font-bold text-white mb-6">Leads</h2>
    <div className="bg-gray-800 rounded-lg p-6">
      <div className="space-y-4">
        <div className="bg-gray-700 p-4 rounded-lg">
          <p className="text-white">Nenhum lead registrado</p>
        </div>
      </div>
    </div>
  </div>
)

const MetricsPage = () => (
  <div>
    <h2 className="text-2xl font-bold text-white mb-6">M√©tricas</h2>
    <div className="bg-gray-800 rounded-lg p-6">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <div className="bg-gray-700 p-4 rounded-lg">
          <h3 className="text-lg font-medium text-white">Total de Conversas</h3>
          <p className="text-2xl text-blue-400">0</p>
        </div>
        <div className="bg-gray-700 p-4 rounded-lg">
          <h3 className="text-lg font-medium text-white">Leads Gerados</h3>
          <p className="text-2xl text-green-400">0</p>
        </div>
        <div className="bg-gray-700 p-4 rounded-lg">
          <h3 className="text-lg font-medium text-white">Taxa de Convers√£o</h3>
          <p className="text-2xl text-purple-400">0%</p>
        </div>
      </div>
    </div>
  </div>
)

export default function AdminDashboard() {
  const router = useRouter()
  const [activeSection, setActiveSection] = useState('agents')
  const [showOpenAIConfig, setShowOpenAIConfig] = useState(false)
  const [openAIKey, setOpenAIKey] = useState('')
  const [isSaving, setIsSaving] = useState(false)
  const [isConfigured, setIsConfigured] = useState(false)
  const [error, setError] = useState('')

  const handleSaveOpenAIConfig = async () => {
    try {
      setIsSaving(true)
      setError('')
      
      const response = await fetch('/api/integrations/openai', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ apiKey: openAIKey }),
      })

      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.error || 'Erro ao salvar configura√ß√£o')
      }

      setIsConfigured(true)
      setShowOpenAIConfig(false)
    } catch (error: any) {
      console.error('Erro ao salvar configura√ß√£o:', error)
      setError(error.message || 'Erro ao salvar configura√ß√£o')
    } finally {
      setIsSaving(false)
    }
  }

  const renderIntegrationsContent = () => {
    if (showOpenAIConfig) {
      return (
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-white">Configurar OpenAI</h2>
            <button
              onClick={() => setShowOpenAIConfig(false)}
              className="text-gray-400 hover:text-gray-300"
            >
              ‚úï
            </button>
          </div>
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-200 mb-2">
                API Key da OpenAI
              </label>
              <p className="text-sm text-gray-400 mb-4">
                Insira sua API key da OpenAI para habilitar a cria√ß√£o de assistentes inteligentes.
                Voc√™ pode encontrar sua API key no{' '}
                <a
                  href="https://platform.openai.com/api-keys"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="text-blue-400 hover:text-blue-300"
                >
                  dashboard da OpenAI
                </a>
                .
              </p>
              <input
                type="password"
                value={openAIKey}
                onChange={(e) => setOpenAIKey(e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                placeholder="sk-..."
              />
            </div>
            {error && (
              <div className="p-4 bg-red-500/10 border border-red-500 rounded-md">
                <p className="text-sm text-red-500">{error}</p>
              </div>
            )}
            <div className="flex justify-end gap-4">
              <button
                onClick={() => setShowOpenAIConfig(false)}
                className="px-4 py-2 text-sm text-gray-300 hover:text-gray-200"
              >
                Cancelar
              </button>
              <button
                onClick={handleSaveOpenAIConfig}
                disabled={!openAIKey || isSaving}
                className={`px-4 py-2 bg-blue-500 text-white text-sm rounded-md ${
                  !openAIKey || isSaving ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-600'
                }`}
              >
                {isSaving ? 'Salvando...' : 'Salvar Configura√ß√£o'}
              </button>
            </div>
          </div>
        </div>
      )
    }

    return (
      <div>
        <h2 className="text-2xl font-bold text-white mb-6">Integra√ß√µes</h2>
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <h3 className="text-lg font-medium text-white">OpenAI</h3>
                  <p className="text-gray-400">Integre com GPT-4 e outros modelos</p>
                </div>
                {isConfigured && (
                  <span className="px-2 py-1 text-xs font-medium text-green-400 bg-green-400/10 rounded-full">
                    Configurado
                  </span>
                )}
              </div>
              <button
                onClick={() => setShowOpenAIConfig(true)}
                className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-500 w-full"
              >
                {isConfigured ? 'Reconfigurar' : 'Configurar'}
              </button>
            </div>
            <div className="bg-gray-700 p-4 rounded-lg">
              <h3 className="text-lg font-medium text-white">Claude</h3>
              <p className="text-gray-400 mb-4">Integre com Anthropic Claude</p>
              <button className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-500 w-full">
                Configurar
              </button>
            </div>
            <div className="bg-gray-700 p-4 rounded-lg">
              <h3 className="text-lg font-medium text-white">WhatsApp</h3>
              <p className="text-gray-400 mb-4">Conecte com WhatsApp Business</p>
              <button className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-500 w-full">
                Configurar
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  const renderContent = () => {
    switch (activeSection) {
      case 'agents':
        return <AgentsPage />
      case 'conversations':
        return <ConversationsPage />
      case 'leads':
        return <LeadsPage />
      case 'metrics':
        return <MetricsPage />
      case 'integrations':
        return renderIntegrationsContent()
      default:
        return <AgentsPage />
    }
  }

  return (
    <div className="flex h-screen bg-gray-900">
      {/* Sidebar */}
      <div className="w-64 bg-gray-800">
        <div className="flex items-center h-16 px-4 bg-gray-900">
          <div className="flex items-center space-x-2">
            <div className="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
              <span className="text-lg font-bold text-white">N</span>
            </div>
            <span className="text-xl font-bold text-white">Navibot</span>
          </div>
        </div>
        <nav className="mt-4">
          <div className="px-4 py-2">
            <div className="relative">
              <button className="w-full text-left px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 rounded-md">
                Conta ag√™ncia
              </button>
            </div>
          </div>
          <div className="px-4 py-2">
            <h3 className="px-4 py-2 text-xs font-semibold text-gray-400 uppercase">
              Gest√£o de Agentes
            </h3>
            {menuItems.map((item) => (
              <button
                key={item.id}
                onClick={() => setActiveSection(item.id)}
                className={`w-full flex items-center px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 rounded-md ${
                  activeSection === item.id ? 'bg-gray-700' : ''
                }`}
              >
                <span className="mr-3">{item.icon}</span>
                {item.title}
              </button>
            ))}
          </div>
          <div className="px-4 py-2">
            <h3 className="px-4 py-2 text-xs font-semibold text-gray-400 uppercase">
              Ecossistema
            </h3>
            <button className="w-full flex items-center px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 rounded-md">
              <span className="mr-3">üí¨</span>
              Comunidade no Discord
            </button>
            <button className="w-full flex items-center px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 rounded-md">
              <span className="mr-3">üöÄ</span>
              Programa de Acelera√ß√£o
            </button>
            <button className="w-full flex items-center px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 rounded-md">
              <span className="mr-3">‚ùì</span>
              Suporte
            </button>
          </div>
        </nav>
        <div className="absolute bottom-0 w-64 p-4 bg-gray-800">
          <div className="flex items-center p-2 bg-gray-900 rounded-lg">
            <div className="flex-shrink-0">
              <div className="w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white">
                IC
              </div>
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-white">IVAN CARLOS</p>
              <p className="text-xs text-gray-400">ivancnogueira@gmail.com</p>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 overflow-auto">
        <header className="bg-gray-800 shadow-md">
          <div className="flex items-center justify-between h-16 px-8">
            <h1 className="text-xl font-bold text-white">Dashboard</h1>
            <button
              onClick={() => router.push('/api/auth/signout')}
              className="px-4 py-2 text-sm text-gray-300 hover:bg-gray-700 rounded-md"
            >
              Sair
            </button>
          </div>
        </header>

        <main className="p-8">
          {renderContent()}
        </main>
      </div>
    </div>
  )
} 